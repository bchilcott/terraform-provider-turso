// Code generated by ogen, DO NOT EDIT.

package client

import (
	"context"

	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// V1AuthAPITokensGet implements GET /v1/auth/api-tokens operation.
//
// Returns a list of API tokens belonging to a user.
//
// GET /v1/auth/api-tokens
func (UnimplementedHandler) V1AuthAPITokensGet(ctx context.Context) (r *V1AuthAPITokensGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1AuthAPITokensTokenNameDelete implements DELETE /v1/auth/api-tokens/{tokenName} operation.
//
// Revokes the provided API token belonging to a user.
//
// DELETE /v1/auth/api-tokens/{tokenName}
func (UnimplementedHandler) V1AuthAPITokensTokenNameDelete(ctx context.Context, params V1AuthAPITokensTokenNameDeleteParams) (r jx.Raw, _ error) {
	return r, ht.ErrNotImplemented
}

// V1AuthAPITokensTokenNamePost implements POST /v1/auth/api-tokens/{tokenName} operation.
//
// Returns a new API token belonging to a user.
//
// POST /v1/auth/api-tokens/{tokenName}
func (UnimplementedHandler) V1AuthAPITokensTokenNamePost(ctx context.Context, params V1AuthAPITokensTokenNamePostParams) (r jx.Raw, _ error) {
	return r, ht.ErrNotImplemented
}

// V1AuthValidateGet implements GET /v1/auth/validate operation.
//
// Validates an API token belonging to a user.
//
// GET /v1/auth/validate
func (UnimplementedHandler) V1AuthValidateGet(ctx context.Context) (r *V1AuthValidateGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1LocationsGet implements GET /v1/locations operation.
//
// Returns a list of locations where you can create or replicate databases.
//
// GET /v1/locations
func (UnimplementedHandler) V1LocationsGet(ctx context.Context) (r *V1LocationsGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsGet implements GET /v1/organizations operation.
//
// Returns a list of organizations the authenticated user owns or is a member of.
//
// GET /v1/organizations
func (UnimplementedHandler) V1OrganizationsGet(ctx context.Context) (r []Organization, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameAuditLogsGet implements GET /v1/organizations/{organizationName}/audit-logs operation.
//
// Return the audit logs for the given organization, ordered by the `created_at` field in descending
// order.
//
// GET /v1/organizations/{organizationName}/audit-logs
func (UnimplementedHandler) V1OrganizationsOrganizationNameAuditLogsGet(ctx context.Context, params V1OrganizationsOrganizationNameAuditLogsGetParams) (r *V1OrganizationsOrganizationNameAuditLogsGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePost implements POST /v1/organizations/{organizationName}/databases/{databaseName}/auth/rotate operation.
//
// Invalidates all authorization tokens for the specified database.
//
// POST /v1/organizations/{organizationName}/databases/{databaseName}/auth/rotate
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePost(ctx context.Context, params V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostParams) (r V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPost implements POST /v1/organizations/{organizationName}/databases/{databaseName}/auth/tokens operation.
//
// Generates an authorization token for the specified database.
//
// POST /v1/organizations/{organizationName}/databases/{databaseName}/auth/tokens
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPost(ctx context.Context, req OptCreateTokenInput, params V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostParams) (r V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatch implements PATCH /v1/organizations/{organizationName}/databases/{databaseName}/configuration operation.
//
// Update a database configuration belonging to the organization or user.
//
// PATCH /v1/organizations/{organizationName}/databases/{databaseName}/configuration
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatch(ctx context.Context, req *DatabaseConfigurationInput, params V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatchParams) (r *DatabaseConfigurationResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameDelete implements DELETE /v1/organizations/{organizationName}/databases/{databaseName} operation.
//
// Delete a database belonging to the organization or user.
//
// DELETE /v1/organizations/{organizationName}/databases/{databaseName}
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameDelete(ctx context.Context, params V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteParams) (r V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameGet implements GET /v1/organizations/{organizationName}/databases/{databaseName} operation.
//
// Returns a database belonging to the organization or user.
//
// GET /v1/organizations/{organizationName}/databases/{databaseName}
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameGet(ctx context.Context, params V1OrganizationsOrganizationNameDatabasesDatabaseNameGetParams) (r V1OrganizationsOrganizationNameDatabasesDatabaseNameGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGet implements GET /v1/organizations/{organizationName}/databases/{databaseName}/instances operation.
//
// Returns a list of instances of a database. Instances are the individual primary or replica
// databases in each region defined by the group.
//
// GET /v1/organizations/{organizationName}/databases/{databaseName}/instances
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGet(ctx context.Context, params V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetParams) (r *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGet implements GET /v1/organizations/{organizationName}/databases/{databaseName}/instances/{instanceName} operation.
//
// Return the individual database instance by name.
//
// GET /v1/organizations/{organizationName}/databases/{databaseName}/instances/{instanceName}
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGet(ctx context.Context, params V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetParams) (r *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGet implements GET /v1/organizations/{organizationName}/databases/{databaseName}/stats operation.
//
// Fetch the top queries of a database, including the count of rows read and written.
//
// GET /v1/organizations/{organizationName}/databases/{databaseName}/stats
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGet(ctx context.Context, params V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetParams) (r V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGet implements GET /v1/organizations/{organizationName}/databases/{databaseName}/usage operation.
//
// Fetch activity usage for a database in a given time period.
//
// GET /v1/organizations/{organizationName}/databases/{databaseName}/usage
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGet(ctx context.Context, params V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetParams) (r V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesDumpsPost implements POST /v1/organizations/{organizationName}/databases/dumps operation.
//
// Upload a SQL dump to be used when [creating a new database](/api-reference/databases/create) from
// seed.
//
// POST /v1/organizations/{organizationName}/databases/dumps
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesDumpsPost(ctx context.Context, req *V1OrganizationsOrganizationNameDatabasesDumpsPostReq, params V1OrganizationsOrganizationNameDatabasesDumpsPostParams) (r *V1OrganizationsOrganizationNameDatabasesDumpsPostOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesGet implements GET /v1/organizations/{organizationName}/databases operation.
//
// Returns a list of databases belonging to the organization or user.
//
// GET /v1/organizations/{organizationName}/databases
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesGet(ctx context.Context, params V1OrganizationsOrganizationNameDatabasesGetParams) (r *V1OrganizationsOrganizationNameDatabasesGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameDatabasesPost implements POST /v1/organizations/{organizationName}/databases operation.
//
// Creates a new database in a group for the organization or user.
//
// POST /v1/organizations/{organizationName}/databases
func (UnimplementedHandler) V1OrganizationsOrganizationNameDatabasesPost(ctx context.Context, req *CreateDatabaseInput, params V1OrganizationsOrganizationNameDatabasesPostParams) (r V1OrganizationsOrganizationNameDatabasesPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGet implements GET /v1/organizations/{organizationName}/groups operation.
//
// Returns a list of groups belonging to the organization or user.
//
// GET /v1/organizations/{organizationName}/groups
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGet(ctx context.Context, params V1OrganizationsOrganizationNameGroupsGetParams) (r *V1OrganizationsOrganizationNameGroupsGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePost implements POST /v1/organizations/{organizationName}/groups/{groupName}/auth/rotate operation.
//
// Invalidates all authorization tokens for the specified group.
//
// POST /v1/organizations/{organizationName}/groups/{groupName}/auth/rotate
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePost(ctx context.Context, params V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostParams) (r V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPost implements POST /v1/organizations/{organizationName}/groups/{groupName}/auth/tokens operation.
//
// Generates an authorization token for the specified group.
//
// POST /v1/organizations/{organizationName}/groups/{groupName}/auth/tokens
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPost(ctx context.Context, req OptCreateTokenInput, params V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostParams) (r V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGroupNameDelete implements DELETE /v1/organizations/{organizationName}/groups/{groupName} operation.
//
// Delete a group belonging to the organization or user.
//
// DELETE /v1/organizations/{organizationName}/groups/{groupName}
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGroupNameDelete(ctx context.Context, params V1OrganizationsOrganizationNameGroupsGroupNameDeleteParams) (r V1OrganizationsOrganizationNameGroupsGroupNameDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGroupNameGet implements GET /v1/organizations/{organizationName}/groups/{groupName} operation.
//
// Returns a group belonging to the organization or user.
//
// GET /v1/organizations/{organizationName}/groups/{groupName}
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGroupNameGet(ctx context.Context, params V1OrganizationsOrganizationNameGroupsGroupNameGetParams) (r V1OrganizationsOrganizationNameGroupsGroupNameGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDelete implements DELETE /v1/organizations/{organizationName}/groups/{groupName}/locations/{location} operation.
//
// Removes a location from the specified group.
//
// DELETE /v1/organizations/{organizationName}/groups/{groupName}/locations/{location}
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDelete(ctx context.Context, params V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteParams) (r V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPost implements POST /v1/organizations/{organizationName}/groups/{groupName}/locations/{location} operation.
//
// Adds a location to the specified group.
//
// POST /v1/organizations/{organizationName}/groups/{groupName}/locations/{location}
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPost(ctx context.Context, params V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostParams) (r V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGroupNameTransferPost implements POST /v1/organizations/{organizationName}/groups/{groupName}/transfer operation.
//
// Transfer a group to another organization that you own or a member of.
//
// POST /v1/organizations/{organizationName}/groups/{groupName}/transfer
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGroupNameTransferPost(ctx context.Context, req *V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq, params V1OrganizationsOrganizationNameGroupsGroupNameTransferPostParams) (r V1OrganizationsOrganizationNameGroupsGroupNameTransferPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsGroupNameUpdatePost implements POST /v1/organizations/{organizationName}/groups/{groupName}/update operation.
//
// Updates all databases in the group to the latest libSQL version.
//
// POST /v1/organizations/{organizationName}/groups/{groupName}/update
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsGroupNameUpdatePost(ctx context.Context, params V1OrganizationsOrganizationNameGroupsGroupNameUpdatePostParams) (r V1OrganizationsOrganizationNameGroupsGroupNameUpdatePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameGroupsPost implements POST /v1/organizations/{organizationName}/groups operation.
//
// Creates a new group for the organization or user.
//
// POST /v1/organizations/{organizationName}/groups
func (UnimplementedHandler) V1OrganizationsOrganizationNameGroupsPost(ctx context.Context, req *NewGroup, params V1OrganizationsOrganizationNameGroupsPostParams) (r V1OrganizationsOrganizationNameGroupsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameInvitesGet implements GET /v1/organizations/{organizationName}/invites operation.
//
// Returns a list of invites for the organization.
//
// GET /v1/organizations/{organizationName}/invites
func (UnimplementedHandler) V1OrganizationsOrganizationNameInvitesGet(ctx context.Context, params V1OrganizationsOrganizationNameInvitesGetParams) (r *V1OrganizationsOrganizationNameInvitesGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameInvitesPost implements POST /v1/organizations/{organizationName}/invites operation.
//
// Invite a user to an organization.
//
// POST /v1/organizations/{organizationName}/invites
func (UnimplementedHandler) V1OrganizationsOrganizationNameInvitesPost(ctx context.Context, req *V1OrganizationsOrganizationNameInvitesPostReq, params V1OrganizationsOrganizationNameInvitesPostParams) (r *V1OrganizationsOrganizationNameInvitesPostOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameMembersGet implements GET /v1/organizations/{organizationName}/members operation.
//
// Returns a list of members part of the organization.
//
// GET /v1/organizations/{organizationName}/members
func (UnimplementedHandler) V1OrganizationsOrganizationNameMembersGet(ctx context.Context, params V1OrganizationsOrganizationNameMembersGetParams) (r *V1OrganizationsOrganizationNameMembersGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameMembersPost implements POST /v1/organizations/{organizationName}/members operation.
//
// Add an existing Turso user to an organization.
//
// POST /v1/organizations/{organizationName}/members
func (UnimplementedHandler) V1OrganizationsOrganizationNameMembersPost(ctx context.Context, req *V1OrganizationsOrganizationNameMembersPostReq, params V1OrganizationsOrganizationNameMembersPostParams) (r V1OrganizationsOrganizationNameMembersPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNameMembersUsernameDelete implements DELETE /v1/organizations/{organizationName}/members/{username} operation.
//
// Remove a user from the organization by username.
//
// DELETE /v1/organizations/{organizationName}/members/{username}
func (UnimplementedHandler) V1OrganizationsOrganizationNameMembersUsernameDelete(ctx context.Context, params V1OrganizationsOrganizationNameMembersUsernameDeleteParams) (r V1OrganizationsOrganizationNameMembersUsernameDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationNamePatch implements PATCH /v1/organizations/{organizationName} operation.
//
// Update an organization you own or are a member of.
//
// PATCH /v1/organizations/{organizationName}
func (UnimplementedHandler) V1OrganizationsOrganizationNamePatch(ctx context.Context, req *V1OrganizationsOrganizationNamePatchReq, params V1OrganizationsOrganizationNamePatchParams) (r *V1OrganizationsOrganizationNamePatchOK, _ error) {
	return r, ht.ErrNotImplemented
}
