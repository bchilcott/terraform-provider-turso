// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// V1AuthAPITokensTokenNameDeleteParams is parameters of DELETE /v1/auth/api-tokens/{tokenName} operation.
type V1AuthAPITokensTokenNameDeleteParams struct {
	// The name of the api token.
	TokenName string
}

func unpackV1AuthAPITokensTokenNameDeleteParams(packed middleware.Parameters) (params V1AuthAPITokensTokenNameDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "tokenName",
			In:   "path",
		}
		params.TokenName = packed[key].(string)
	}
	return params
}

func decodeV1AuthAPITokensTokenNameDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params V1AuthAPITokensTokenNameDeleteParams, _ error) {
	// Decode path: tokenName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tokenName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TokenName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tokenName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1AuthAPITokensTokenNamePostParams is parameters of POST /v1/auth/api-tokens/{tokenName} operation.
type V1AuthAPITokensTokenNamePostParams struct {
	// The name of the api token.
	TokenName string
}

func unpackV1AuthAPITokensTokenNamePostParams(packed middleware.Parameters) (params V1AuthAPITokensTokenNamePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "tokenName",
			In:   "path",
		}
		params.TokenName = packed[key].(string)
	}
	return params
}

func decodeV1AuthAPITokensTokenNamePostParams(args [1]string, argsEscaped bool, r *http.Request) (params V1AuthAPITokensTokenNamePostParams, _ error) {
	// Decode path: tokenName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tokenName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TokenName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tokenName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameAuditLogsGetParams is parameters of GET /v1/organizations/{organizationName}/audit-logs operation.
type V1OrganizationsOrganizationNameAuditLogsGetParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The limit of items to return per page. Defaults to 100.
	PageSize OptInt
	// The page number to return. Defaults to 1.
	Page OptInt
}

func unpackV1OrganizationsOrganizationNameAuditLogsGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameAuditLogsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "page_size",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	return params
}

func decodeV1OrganizationsOrganizationNameAuditLogsGetParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameAuditLogsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: page_size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page_size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page_size",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostParams is parameters of POST /v1/organizations/{organizationName}/databases/{databaseName}/auth/rotate operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostParams is parameters of POST /v1/organizations/{organizationName}/databases/{databaseName}/auth/tokens operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
	// Expiration time for the token (e.g., 2w1d30m).
	Expiration OptString
	// Authorization level for the token (full-access or read-only).
	Authorization OptV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostAuthorization
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "expiration",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Expiration = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "authorization",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Authorization = v.(OptV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostAuthorization)
		}
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: expiration.
	{
		val := string("never")
		params.Expiration.SetTo(val)
	}
	// Decode query: expiration.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "expiration",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotExpirationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotExpirationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Expiration.SetTo(paramsDotExpirationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "expiration",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: authorization.
	{
		val := V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostAuthorization("full-access")
		params.Authorization.SetTo(val)
	}
	// Decode query: authorization.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "authorization",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorizationVal V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostAuthorization
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAuthorizationVal = V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostAuthorization(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Authorization.SetTo(paramsDotAuthorizationVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Authorization.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "authorization",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatchParams is parameters of PATCH /v1/organizations/{organizationName}/databases/{databaseName}/configuration operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatchParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatchParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatchParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatchParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteParams is parameters of DELETE /v1/organizations/{organizationName}/databases/{databaseName} operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameGetParams is parameters of GET /v1/organizations/{organizationName}/databases/{databaseName} operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameGetParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameGetParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetParams is parameters of GET /v1/organizations/{organizationName}/databases/{databaseName}/instances operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetParams is parameters of GET /v1/organizations/{organizationName}/databases/{databaseName}/instances/{instanceName} operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
	// The name of the instance (location code).
	InstanceName string
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "instanceName",
			In:   "path",
		}
		params.InstanceName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetParams(args [3]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: instanceName.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "instanceName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.InstanceName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "instanceName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetParams is parameters of GET /v1/organizations/{organizationName}/databases/{databaseName}/stats operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetParams is parameters of GET /v1/organizations/{organizationName}/databases/{databaseName}/usage operation.
type V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the database.
	DatabaseName string
	// The datetime to retrieve usage **from** in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format. Defaults to the current calendar month if not provided. Example: `2023-01-01T00:00:00Z`.
	From OptDateTime
	// The datetime to retrieve usage **to** in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	//  Defaults to the current calendar month if not provided. Example: `2023-02-01T00:00:00Z`.
	To OptDateTime
}

func unpackV1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.To = v.(OptDateTime)
		}
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.To.SetTo(paramsDotToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesDumpsPostParams is parameters of POST /v1/organizations/{organizationName}/databases/dumps operation.
type V1OrganizationsOrganizationNameDatabasesDumpsPostParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameDatabasesDumpsPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesDumpsPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesDumpsPostParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesDumpsPostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesGetParams is parameters of GET /v1/organizations/{organizationName}/databases operation.
type V1OrganizationsOrganizationNameDatabasesGetParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameDatabasesGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesGetParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameDatabasesPostParams is parameters of POST /v1/organizations/{organizationName}/databases operation.
type V1OrganizationsOrganizationNameDatabasesPostParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameDatabasesPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameDatabasesPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameDatabasesPostParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameDatabasesPostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGetParams is parameters of GET /v1/organizations/{organizationName}/groups operation.
type V1OrganizationsOrganizationNameGroupsGetParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameGroupsGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGetParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostParams is parameters of POST /v1/organizations/{organizationName}/groups/{groupName}/auth/rotate operation.
type V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the group.
	GroupName string
}

func unpackV1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostParams is parameters of POST /v1/organizations/{organizationName}/groups/{groupName}/auth/tokens operation.
type V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the group.
	GroupName string
	// Expiration time for the token (e.g., 2w1d30m).
	Expiration OptString
	// Authorization level for the token (full-access or read-only).
	Authorization OptV1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostAuthorization
}

func unpackV1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "expiration",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Expiration = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "authorization",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Authorization = v.(OptV1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostAuthorization)
		}
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: expiration.
	{
		val := string("never")
		params.Expiration.SetTo(val)
	}
	// Decode query: expiration.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "expiration",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotExpirationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotExpirationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Expiration.SetTo(paramsDotExpirationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "expiration",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: authorization.
	{
		val := V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostAuthorization("full-access")
		params.Authorization.SetTo(val)
	}
	// Decode query: authorization.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "authorization",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorizationVal V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostAuthorization
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAuthorizationVal = V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostAuthorization(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Authorization.SetTo(paramsDotAuthorizationVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Authorization.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "authorization",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGroupNameDeleteParams is parameters of DELETE /v1/organizations/{organizationName}/groups/{groupName} operation.
type V1OrganizationsOrganizationNameGroupsGroupNameDeleteParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the group.
	GroupName string
}

func unpackV1OrganizationsOrganizationNameGroupsGroupNameDeleteParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGroupNameDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGroupNameDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGroupNameDeleteParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGroupNameGetParams is parameters of GET /v1/organizations/{organizationName}/groups/{groupName} operation.
type V1OrganizationsOrganizationNameGroupsGroupNameGetParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the group.
	GroupName string
}

func unpackV1OrganizationsOrganizationNameGroupsGroupNameGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGroupNameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGroupNameGetParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGroupNameGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteParams is parameters of DELETE /v1/organizations/{organizationName}/groups/{groupName}/locations/{location} operation.
type V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the group.
	GroupName string
	// The location code to remove from the group.
	Location string
}

func unpackV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "location",
			In:   "path",
		}
		params.Location = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteParams(args [3]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: location.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "location",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Location = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostParams is parameters of POST /v1/organizations/{organizationName}/groups/{groupName}/locations/{location} operation.
type V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the group.
	GroupName string
	// The location code to add to the group.
	Location string
}

func unpackV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "location",
			In:   "path",
		}
		params.Location = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostParams(args [3]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: location.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "location",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Location = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGroupNameTransferPostParams is parameters of POST /v1/organizations/{organizationName}/groups/{groupName}/transfer operation.
type V1OrganizationsOrganizationNameGroupsGroupNameTransferPostParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the group.
	GroupName string
}

func unpackV1OrganizationsOrganizationNameGroupsGroupNameTransferPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGroupNameTransferPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGroupNameTransferPostParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGroupNameTransferPostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsGroupNameUpdatePostParams is parameters of POST /v1/organizations/{organizationName}/groups/{groupName}/update operation.
type V1OrganizationsOrganizationNameGroupsGroupNameUpdatePostParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The name of the group.
	GroupName string
}

func unpackV1OrganizationsOrganizationNameGroupsGroupNameUpdatePostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsGroupNameUpdatePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsGroupNameUpdatePostParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsGroupNameUpdatePostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameGroupsPostParams is parameters of POST /v1/organizations/{organizationName}/groups operation.
type V1OrganizationsOrganizationNameGroupsPostParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameGroupsPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameGroupsPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameGroupsPostParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameGroupsPostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameInvitesGetParams is parameters of GET /v1/organizations/{organizationName}/invites operation.
type V1OrganizationsOrganizationNameInvitesGetParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameInvitesGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameInvitesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameInvitesGetParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameInvitesGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameInvitesPostParams is parameters of POST /v1/organizations/{organizationName}/invites operation.
type V1OrganizationsOrganizationNameInvitesPostParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameInvitesPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameInvitesPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameInvitesPostParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameInvitesPostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameMembersGetParams is parameters of GET /v1/organizations/{organizationName}/members operation.
type V1OrganizationsOrganizationNameMembersGetParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameMembersGetParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameMembersGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameMembersGetParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameMembersGetParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameMembersPostParams is parameters of POST /v1/organizations/{organizationName}/members operation.
type V1OrganizationsOrganizationNameMembersPostParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNameMembersPostParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameMembersPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameMembersPostParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameMembersPostParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNameMembersUsernameDeleteParams is parameters of DELETE /v1/organizations/{organizationName}/members/{username} operation.
type V1OrganizationsOrganizationNameMembersUsernameDeleteParams struct {
	// The name of the organization or user.
	OrganizationName string
	// The username of a Turso user or organization member.
	Username string
}

func unpackV1OrganizationsOrganizationNameMembersUsernameDeleteParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNameMembersUsernameDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNameMembersUsernameDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNameMembersUsernameDeleteParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1OrganizationsOrganizationNamePatchParams is parameters of PATCH /v1/organizations/{organizationName} operation.
type V1OrganizationsOrganizationNamePatchParams struct {
	// The name of the organization or user.
	OrganizationName string
}

func unpackV1OrganizationsOrganizationNamePatchParams(packed middleware.Parameters) (params V1OrganizationsOrganizationNamePatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationName",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeV1OrganizationsOrganizationNamePatchParams(args [1]string, argsEscaped bool, r *http.Request) (params V1OrganizationsOrganizationNamePatchParams, _ error) {
	// Decode path: organizationName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
