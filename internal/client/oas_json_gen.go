// Code generated by ogen, DO NOT EDIT.

package client

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *APIToken) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *APIToken) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAPIToken = [2]string{
	0: "name",
	1: "id",
}

// Decode decodes APIToken from json.
func (s *APIToken) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIToken to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode APIToken")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIToken) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIToken) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuditLog) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuditLog) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
	{
		if s.Origin.Set {
			e.FieldStart("origin")
			s.Origin.Encode(e)
		}
	}
	{
		if s.Author.Set {
			e.FieldStart("author")
			s.Author.Encode(e)
		}
	}
	{
		if s.CreatedAt.Set {
			e.FieldStart("created_at")
			s.CreatedAt.Encode(e)
		}
	}
	{
		if s.Data != nil {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuditLog = [6]string{
	0: "code",
	1: "message",
	2: "origin",
	3: "author",
	4: "created_at",
	5: "data",
}

// Decode decodes AuditLog from json.
func (s *AuditLog) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuditLog to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "origin":
			if err := func() error {
				s.Origin.Reset()
				if err := s.Origin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin\"")
			}
		case "author":
			if err := func() error {
				s.Author.Reset()
				if err := s.Author.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"author\"")
			}
		case "created_at":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_at\"")
			}
		case "data":
			if err := func() error {
				s.Data = nil
				var elem AuditLogData
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Data = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuditLog")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuditLog) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuditLog) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuditLogCode as json.
func (s AuditLogCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuditLogCode from json.
func (s *AuditLogCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuditLogCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuditLogCode(v) {
	case AuditLogCodeUserSignup:
		*s = AuditLogCodeUserSignup
	case AuditLogCodeDbCreate:
		*s = AuditLogCodeDbCreate
	case AuditLogCodeDbDelete:
		*s = AuditLogCodeDbDelete
	case AuditLogCodeInstanceCreate:
		*s = AuditLogCodeInstanceCreate
	case AuditLogCodeInstanceDelete:
		*s = AuditLogCodeInstanceDelete
	case AuditLogCodeOrgCreate:
		*s = AuditLogCodeOrgCreate
	case AuditLogCodeOrgDelete:
		*s = AuditLogCodeOrgDelete
	case AuditLogCodeOrgMemberAdd:
		*s = AuditLogCodeOrgMemberAdd
	case AuditLogCodeOrgMemberRm:
		*s = AuditLogCodeOrgMemberRm
	case AuditLogCodeOrgMemberLeave:
		*s = AuditLogCodeOrgMemberLeave
	case AuditLogCodeOrgPlanUpdate:
		*s = AuditLogCodeOrgPlanUpdate
	case AuditLogCodeOrgSetOverages:
		*s = AuditLogCodeOrgSetOverages
	case AuditLogCodeGroupCreate:
		*s = AuditLogCodeGroupCreate
	case AuditLogCodeGroupDelete:
		*s = AuditLogCodeGroupDelete
	default:
		*s = AuditLogCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuditLogCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuditLogCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuditLogData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuditLogData) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfAuditLogData = [0]string{}

// Decode decodes AuditLogData from json.
func (s *AuditLogData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuditLogData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode AuditLogData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuditLogData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuditLogData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateDatabaseInput) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateDatabaseInput) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("group")
		e.Str(s.Group)
	}
	{
		if s.Seed.Set {
			e.FieldStart("seed")
			s.Seed.Encode(e)
		}
	}
	{
		if s.SizeLimit.Set {
			e.FieldStart("size_limit")
			s.SizeLimit.Encode(e)
		}
	}
	{
		if s.IsSchema.Set {
			e.FieldStart("is_schema")
			s.IsSchema.Encode(e)
		}
	}
	{
		if s.Schema.Set {
			e.FieldStart("schema")
			s.Schema.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateDatabaseInput = [6]string{
	0: "name",
	1: "group",
	2: "seed",
	3: "size_limit",
	4: "is_schema",
	5: "schema",
}

// Decode decodes CreateDatabaseInput from json.
func (s *CreateDatabaseInput) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateDatabaseInput to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "group":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Group = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group\"")
			}
		case "seed":
			if err := func() error {
				s.Seed.Reset()
				if err := s.Seed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seed\"")
			}
		case "size_limit":
			if err := func() error {
				s.SizeLimit.Reset()
				if err := s.SizeLimit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size_limit\"")
			}
		case "is_schema":
			if err := func() error {
				s.IsSchema.Reset()
				if err := s.IsSchema.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_schema\"")
			}
		case "schema":
			if err := func() error {
				s.Schema.Reset()
				if err := s.Schema.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateDatabaseInput")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreateDatabaseInput) {
					name = jsonFieldsNameOfCreateDatabaseInput[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateDatabaseInput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateDatabaseInput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateDatabaseInputSeed) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateDatabaseInputSeed) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Timestamp.Set {
			e.FieldStart("timestamp")
			s.Timestamp.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateDatabaseInputSeed = [4]string{
	0: "type",
	1: "name",
	2: "url",
	3: "timestamp",
}

// Decode decodes CreateDatabaseInputSeed from json.
func (s *CreateDatabaseInputSeed) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateDatabaseInputSeed to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "timestamp":
			if err := func() error {
				s.Timestamp.Reset()
				if err := s.Timestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateDatabaseInputSeed")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateDatabaseInputSeed) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateDatabaseInputSeed) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateDatabaseInputSeedType as json.
func (s CreateDatabaseInputSeedType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreateDatabaseInputSeedType from json.
func (s *CreateDatabaseInputSeedType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateDatabaseInputSeedType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreateDatabaseInputSeedType(v) {
	case CreateDatabaseInputSeedTypeDatabase:
		*s = CreateDatabaseInputSeedTypeDatabase
	case CreateDatabaseInputSeedTypeDump:
		*s = CreateDatabaseInputSeedTypeDump
	default:
		*s = CreateDatabaseInputSeedType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreateDatabaseInputSeedType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateDatabaseInputSeedType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateDatabaseOutput) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateDatabaseOutput) encodeFields(e *jx.Encoder) {
	{
		if s.DbId.Set {
			e.FieldStart("DbId")
			s.DbId.Encode(e)
		}
	}
	{
		if s.Hostname.Set {
			e.FieldStart("Hostname")
			s.Hostname.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("Name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateDatabaseOutput = [3]string{
	0: "DbId",
	1: "Hostname",
	2: "Name",
}

// Decode decodes CreateDatabaseOutput from json.
func (s *CreateDatabaseOutput) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateDatabaseOutput to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "DbId":
			if err := func() error {
				s.DbId.Reset()
				if err := s.DbId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DbId\"")
			}
		case "Hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Hostname\"")
			}
		case "Name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateDatabaseOutput")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateDatabaseOutput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateDatabaseOutput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateTokenInput) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateTokenInput) encodeFields(e *jx.Encoder) {
	{
		if s.Permissions.Set {
			e.FieldStart("permissions")
			s.Permissions.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateTokenInput = [1]string{
	0: "permissions",
}

// Decode decodes CreateTokenInput from json.
func (s *CreateTokenInput) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTokenInput to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "permissions":
			if err := func() error {
				s.Permissions.Reset()
				if err := s.Permissions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"permissions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateTokenInput")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateTokenInput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTokenInput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateTokenInputPermissions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateTokenInputPermissions) encodeFields(e *jx.Encoder) {
	{
		if s.ReadAttach.Set {
			e.FieldStart("read_attach")
			s.ReadAttach.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateTokenInputPermissions = [1]string{
	0: "read_attach",
}

// Decode decodes CreateTokenInputPermissions from json.
func (s *CreateTokenInputPermissions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTokenInputPermissions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "read_attach":
			if err := func() error {
				s.ReadAttach.Reset()
				if err := s.ReadAttach.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"read_attach\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateTokenInputPermissions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateTokenInputPermissions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTokenInputPermissions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateTokenInputPermissionsReadAttach) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateTokenInputPermissionsReadAttach) encodeFields(e *jx.Encoder) {
	{
		if s.Databases != nil {
			e.FieldStart("databases")
			e.ArrStart()
			for _, elem := range s.Databases {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCreateTokenInputPermissionsReadAttach = [1]string{
	0: "databases",
}

// Decode decodes CreateTokenInputPermissionsReadAttach from json.
func (s *CreateTokenInputPermissionsReadAttach) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTokenInputPermissionsReadAttach to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "databases":
			if err := func() error {
				s.Databases = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Databases = append(s.Databases, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"databases\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateTokenInputPermissionsReadAttach")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateTokenInputPermissionsReadAttach) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTokenInputPermissionsReadAttach) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Database) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Database) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("Name")
			s.Name.Encode(e)
		}
	}
	{
		if s.DbId.Set {
			e.FieldStart("DbId")
			s.DbId.Encode(e)
		}
	}
	{
		if s.Hostname.Set {
			e.FieldStart("Hostname")
			s.Hostname.Encode(e)
		}
	}
	{
		if s.BlockReads.Set {
			e.FieldStart("block_reads")
			s.BlockReads.Encode(e)
		}
	}
	{
		if s.BlockWrites.Set {
			e.FieldStart("block_writes")
			s.BlockWrites.Encode(e)
		}
	}
	{
		if s.AllowAttach.Set {
			e.FieldStart("allow_attach")
			s.AllowAttach.Encode(e)
		}
	}
	{
		if s.Regions != nil {
			e.FieldStart("regions")
			e.ArrStart()
			for _, elem := range s.Regions {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PrimaryRegion.Set {
			e.FieldStart("primaryRegion")
			s.PrimaryRegion.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Group.Set {
			e.FieldStart("group")
			s.Group.Encode(e)
		}
	}
	{
		if s.IsSchema.Set {
			e.FieldStart("is_schema")
			s.IsSchema.Encode(e)
		}
	}
	{
		if s.Schema.Set {
			e.FieldStart("schema")
			s.Schema.Encode(e)
		}
	}
	{
		if s.Sleeping.Set {
			e.FieldStart("sleeping")
			s.Sleeping.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatabase = [14]string{
	0:  "Name",
	1:  "DbId",
	2:  "Hostname",
	3:  "block_reads",
	4:  "block_writes",
	5:  "allow_attach",
	6:  "regions",
	7:  "primaryRegion",
	8:  "type",
	9:  "version",
	10: "group",
	11: "is_schema",
	12: "schema",
	13: "sleeping",
}

// Decode decodes Database from json.
func (s *Database) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Database to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		case "DbId":
			if err := func() error {
				s.DbId.Reset()
				if err := s.DbId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DbId\"")
			}
		case "Hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Hostname\"")
			}
		case "block_reads":
			if err := func() error {
				s.BlockReads.Reset()
				if err := s.BlockReads.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_reads\"")
			}
		case "block_writes":
			if err := func() error {
				s.BlockWrites.Reset()
				if err := s.BlockWrites.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_writes\"")
			}
		case "allow_attach":
			if err := func() error {
				s.AllowAttach.Reset()
				if err := s.AllowAttach.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_attach\"")
			}
		case "regions":
			if err := func() error {
				s.Regions = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Regions = append(s.Regions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"regions\"")
			}
		case "primaryRegion":
			if err := func() error {
				s.PrimaryRegion.Reset()
				if err := s.PrimaryRegion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primaryRegion\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group\"")
			}
		case "is_schema":
			if err := func() error {
				s.IsSchema.Reset()
				if err := s.IsSchema.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_schema\"")
			}
		case "schema":
			if err := func() error {
				s.Schema.Reset()
				if err := s.Schema.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		case "sleeping":
			if err := func() error {
				s.Sleeping.Reset()
				if err := s.Sleeping.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sleeping\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Database")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Database) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Database) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatabaseConfigurationInput) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatabaseConfigurationInput) encodeFields(e *jx.Encoder) {
	{
		if s.SizeLimit.Set {
			e.FieldStart("size_limit")
			s.SizeLimit.Encode(e)
		}
	}
	{
		if s.AllowAttach.Set {
			e.FieldStart("allow_attach")
			s.AllowAttach.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatabaseConfigurationInput = [2]string{
	0: "size_limit",
	1: "allow_attach",
}

// Decode decodes DatabaseConfigurationInput from json.
func (s *DatabaseConfigurationInput) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatabaseConfigurationInput to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "size_limit":
			if err := func() error {
				s.SizeLimit.Reset()
				if err := s.SizeLimit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size_limit\"")
			}
		case "allow_attach":
			if err := func() error {
				s.AllowAttach.Reset()
				if err := s.AllowAttach.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_attach\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatabaseConfigurationInput")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatabaseConfigurationInput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatabaseConfigurationInput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatabaseConfigurationResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatabaseConfigurationResponse) encodeFields(e *jx.Encoder) {
	{
		if s.SizeLimit.Set {
			e.FieldStart("size_limit")
			s.SizeLimit.Encode(e)
		}
	}
	{
		if s.AllowAttach.Set {
			e.FieldStart("allow_attach")
			s.AllowAttach.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatabaseConfigurationResponse = [2]string{
	0: "size_limit",
	1: "allow_attach",
}

// Decode decodes DatabaseConfigurationResponse from json.
func (s *DatabaseConfigurationResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatabaseConfigurationResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "size_limit":
			if err := func() error {
				s.SizeLimit.Reset()
				if err := s.SizeLimit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size_limit\"")
			}
		case "allow_attach":
			if err := func() error {
				s.AllowAttach.Reset()
				if err := s.AllowAttach.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_attach\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatabaseConfigurationResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatabaseConfigurationResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatabaseConfigurationResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatabaseNotFoundResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatabaseNotFoundResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatabaseNotFoundResponse = [1]string{
	0: "error",
}

// Decode decodes DatabaseNotFoundResponse from json.
func (s *DatabaseNotFoundResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatabaseNotFoundResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatabaseNotFoundResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatabaseNotFoundResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatabaseNotFoundResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatabaseStatsOutput) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatabaseStatsOutput) encodeFields(e *jx.Encoder) {
	{
		if s.Query.Set {
			e.FieldStart("query")
			s.Query.Encode(e)
		}
	}
	{
		if s.RowsRead.Set {
			e.FieldStart("rows_read")
			s.RowsRead.Encode(e)
		}
	}
	{
		if s.RowsWritten.Set {
			e.FieldStart("rows_written")
			s.RowsWritten.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatabaseStatsOutput = [3]string{
	0: "query",
	1: "rows_read",
	2: "rows_written",
}

// Decode decodes DatabaseStatsOutput from json.
func (s *DatabaseStatsOutput) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatabaseStatsOutput to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "query":
			if err := func() error {
				s.Query.Reset()
				if err := s.Query.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query\"")
			}
		case "rows_read":
			if err := func() error {
				s.RowsRead.Reset()
				if err := s.RowsRead.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rows_read\"")
			}
		case "rows_written":
			if err := func() error {
				s.RowsWritten.Reset()
				if err := s.RowsWritten.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rows_written\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatabaseStatsOutput")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatabaseStatsOutput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatabaseStatsOutput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatabaseUsageObject) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatabaseUsageObject) encodeFields(e *jx.Encoder) {
	{
		if s.RowsRead.Set {
			e.FieldStart("rows_read")
			s.RowsRead.Encode(e)
		}
	}
	{
		if s.RowsWritten.Set {
			e.FieldStart("rows_written")
			s.RowsWritten.Encode(e)
		}
	}
	{
		if s.StorageBytes.Set {
			e.FieldStart("storage_bytes")
			s.StorageBytes.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatabaseUsageObject = [3]string{
	0: "rows_read",
	1: "rows_written",
	2: "storage_bytes",
}

// Decode decodes DatabaseUsageObject from json.
func (s *DatabaseUsageObject) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatabaseUsageObject to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "rows_read":
			if err := func() error {
				s.RowsRead.Reset()
				if err := s.RowsRead.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rows_read\"")
			}
		case "rows_written":
			if err := func() error {
				s.RowsWritten.Reset()
				if err := s.RowsWritten.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rows_written\"")
			}
		case "storage_bytes":
			if err := func() error {
				s.StorageBytes.Reset()
				if err := s.StorageBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storage_bytes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatabaseUsageObject")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatabaseUsageObject) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatabaseUsageObject) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatabaseUsageOutput) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatabaseUsageOutput) encodeFields(e *jx.Encoder) {
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Instances != nil {
			e.FieldStart("instances")
			e.ArrStart()
			for _, elem := range s.Instances {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Total.Set {
			e.FieldStart("total")
			s.Total.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatabaseUsageOutput = [3]string{
	0: "uuid",
	1: "instances",
	2: "total",
}

// Decode decodes DatabaseUsageOutput from json.
func (s *DatabaseUsageOutput) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatabaseUsageOutput to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "instances":
			if err := func() error {
				s.Instances = make([]DatabaseUsageOutputInstancesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DatabaseUsageOutputInstancesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Instances = append(s.Instances, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"instances\"")
			}
		case "total":
			if err := func() error {
				s.Total.Reset()
				if err := s.Total.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatabaseUsageOutput")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatabaseUsageOutput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatabaseUsageOutput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatabaseUsageOutputInstancesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatabaseUsageOutputInstancesItem) encodeFields(e *jx.Encoder) {
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Usage.Set {
			e.FieldStart("usage")
			s.Usage.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatabaseUsageOutputInstancesItem = [2]string{
	0: "uuid",
	1: "usage",
}

// Decode decodes DatabaseUsageOutputInstancesItem from json.
func (s *DatabaseUsageOutputInstancesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatabaseUsageOutputInstancesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "usage":
			if err := func() error {
				s.Usage.Reset()
				if err := s.Usage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatabaseUsageOutputInstancesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatabaseUsageOutputInstancesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatabaseUsageOutputInstancesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DbId as json.
func (s DbId) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes DbId from json.
func (s *DbId) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DbId to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DbId(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DbId) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DbId) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Extensions as json.
func (s Extensions) Encode(e *jx.Encoder) {
	switch s.Type {
	case Extensions0Extensions:
		s.Extensions0.Encode(e)
	case Extensions1ItemArrayExtensions:
		e.ArrStart()
		for _, elem := range s.Extensions1ItemArray {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

// Decode decodes Extensions from json.
func (s *Extensions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Extensions to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Array:
		s.Extensions1ItemArray = make([]Extensions1Item, 0)
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem Extensions1Item
			if err := elem.Decode(d); err != nil {
				return err
			}
			s.Extensions1ItemArray = append(s.Extensions1ItemArray, elem)
			return nil
		}); err != nil {
			return err
		}
		s.Type = Extensions1ItemArrayExtensions
	case jx.String:
		if err := s.Extensions0.Decode(d); err != nil {
			return err
		}
		s.Type = Extensions0Extensions
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Extensions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Extensions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Extensions0 as json.
func (s Extensions0) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Extensions0 from json.
func (s *Extensions0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Extensions0 to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Extensions0(v) {
	case Extensions0All:
		*s = Extensions0All
	default:
		*s = Extensions0(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Extensions0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Extensions0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Extensions1Item as json.
func (s Extensions1Item) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Extensions1Item from json.
func (s *Extensions1Item) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Extensions1Item to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Extensions1Item(v) {
	case Extensions1ItemVector:
		*s = Extensions1ItemVector
	case Extensions1ItemVss:
		*s = Extensions1ItemVss
	case Extensions1ItemCrypto:
		*s = Extensions1ItemCrypto
	case Extensions1ItemFuzzy:
		*s = Extensions1ItemFuzzy
	case Extensions1ItemMath:
		*s = Extensions1ItemMath
	case Extensions1ItemStats:
		*s = Extensions1ItemStats
	case Extensions1ItemText:
		*s = Extensions1ItemText
	case Extensions1ItemUnicode:
		*s = Extensions1ItemUnicode
	case Extensions1ItemUUID:
		*s = Extensions1ItemUUID
	case Extensions1ItemRegexp:
		*s = Extensions1ItemRegexp
	default:
		*s = Extensions1Item(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Extensions1Item) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Extensions1Item) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Group) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Group) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Locations != nil {
			e.FieldStart("locations")
			e.ArrStart()
			for _, elem := range s.Locations {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Primary.Set {
			e.FieldStart("primary")
			s.Primary.Encode(e)
		}
	}
	{
		if s.Archived.Set {
			e.FieldStart("archived")
			s.Archived.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroup = [6]string{
	0: "name",
	1: "version",
	2: "uuid",
	3: "locations",
	4: "primary",
	5: "archived",
}

// Decode decodes Group from json.
func (s *Group) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Group to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "locations":
			if err := func() error {
				s.Locations = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Locations = append(s.Locations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locations\"")
			}
		case "primary":
			if err := func() error {
				s.Primary.Reset()
				if err := s.Primary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primary\"")
			}
		case "archived":
			if err := func() error {
				s.Archived.Reset()
				if err := s.Archived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"archived\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Group")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Group) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Group) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupNotFoundResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupNotFoundResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupNotFoundResponse = [1]string{
	0: "error",
}

// Decode decodes GroupNotFoundResponse from json.
func (s *GroupNotFoundResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupNotFoundResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupNotFoundResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupNotFoundResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupNotFoundResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Hostname as json.
func (s Hostname) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Hostname from json.
func (s *Hostname) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Hostname to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Hostname(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Hostname) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Hostname) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Instance) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Instance) encodeFields(e *jx.Encoder) {
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Region.Set {
			e.FieldStart("region")
			s.Region.Encode(e)
		}
	}
	{
		if s.Hostname.Set {
			e.FieldStart("hostname")
			s.Hostname.Encode(e)
		}
	}
}

var jsonFieldsNameOfInstance = [5]string{
	0: "uuid",
	1: "name",
	2: "type",
	3: "region",
	4: "hostname",
}

// Decode decodes Instance from json.
func (s *Instance) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Instance to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "region":
			if err := func() error {
				s.Region.Reset()
				if err := s.Region.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"region\"")
			}
		case "hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostname\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Instance")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Instance) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Instance) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InstanceType as json.
func (s InstanceType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes InstanceType from json.
func (s *InstanceType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InstanceType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch InstanceType(v) {
	case InstanceTypePrimary:
		*s = InstanceTypePrimary
	case InstanceTypeReplica:
		*s = InstanceTypeReplica
	default:
		*s = InstanceType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s InstanceType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InstanceType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Invite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Invite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("ID")
			s.ID.Encode(e)
		}
	}
	{
		if s.CreatedAt.Set {
			e.FieldStart("CreatedAt")
			s.CreatedAt.Encode(e)
		}
	}
	{
		if s.UpdatedAt.Set {
			e.FieldStart("UpdatedAt")
			s.UpdatedAt.Encode(e)
		}
	}
	{
		if s.DeletedAt.Set {
			e.FieldStart("DeletedAt")
			s.DeletedAt.Encode(e)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("Role")
			s.Role.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("Email")
			s.Email.Encode(e)
		}
	}
	{
		if s.OrganizationID.Set {
			e.FieldStart("OrganizationID")
			s.OrganizationID.Encode(e)
		}
	}
	{
		if s.Token.Set {
			e.FieldStart("Token")
			s.Token.Encode(e)
		}
	}
	{
		if s.Organization.Set {
			e.FieldStart("Organization")
			s.Organization.Encode(e)
		}
	}
	{
		if s.Accepted.Set {
			e.FieldStart("Accepted")
			s.Accepted.Encode(e)
		}
	}
}

var jsonFieldsNameOfInvite = [10]string{
	0: "ID",
	1: "CreatedAt",
	2: "UpdatedAt",
	3: "DeletedAt",
	4: "Role",
	5: "Email",
	6: "OrganizationID",
	7: "Token",
	8: "Organization",
	9: "Accepted",
}

// Decode decodes Invite from json.
func (s *Invite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Invite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ID":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "CreatedAt":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CreatedAt\"")
			}
		case "UpdatedAt":
			if err := func() error {
				s.UpdatedAt.Reset()
				if err := s.UpdatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UpdatedAt\"")
			}
		case "DeletedAt":
			if err := func() error {
				s.DeletedAt.Reset()
				if err := s.DeletedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DeletedAt\"")
			}
		case "Role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Role\"")
			}
		case "Email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Email\"")
			}
		case "OrganizationID":
			if err := func() error {
				s.OrganizationID.Reset()
				if err := s.OrganizationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"OrganizationID\"")
			}
		case "Token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Token\"")
			}
		case "Organization":
			if err := func() error {
				s.Organization.Reset()
				if err := s.Organization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Organization\"")
			}
		case "Accepted":
			if err := func() error {
				s.Accepted.Reset()
				if err := s.Accepted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Accepted\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Invite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Invite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Invite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InviteRole as json.
func (s InviteRole) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes InviteRole from json.
func (s *InviteRole) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InviteRole to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch InviteRole(v) {
	case InviteRoleAdmin:
		*s = InviteRoleAdmin
	case InviteRoleMember:
		*s = InviteRoleMember
	default:
		*s = InviteRole(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s InviteRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InviteRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Member) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Member) encodeFields(e *jx.Encoder) {
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
}

var jsonFieldsNameOfMember = [3]string{
	0: "username",
	1: "role",
	2: "email",
}

// Decode decodes Member from json.
func (s *Member) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Member to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Member")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Member) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Member) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MemberRole as json.
func (s MemberRole) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes MemberRole from json.
func (s *MemberRole) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MemberRole to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch MemberRole(v) {
	case MemberRoleOwner:
		*s = MemberRoleOwner
	case MemberRoleAdmin:
		*s = MemberRoleAdmin
	case MemberRoleMember:
		*s = MemberRoleMember
	default:
		*s = MemberRole(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MemberRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MemberRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Name as json.
func (s Name) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Name from json.
func (s *Name) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Name to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Name(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Name) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Name) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NewGroup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NewGroup) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("location")
		e.Str(s.Location)
	}
	{
		if s.Extensions.Set {
			e.FieldStart("extensions")
			s.Extensions.Encode(e)
		}
	}
}

var jsonFieldsNameOfNewGroup = [3]string{
	0: "name",
	1: "location",
	2: "extensions",
}

// Decode decodes NewGroup from json.
func (s *NewGroup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NewGroup to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "location":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Location = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "extensions":
			if err := func() error {
				s.Extensions.Reset()
				if err := s.Extensions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extensions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NewGroup")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfNewGroup) {
					name = jsonFieldsNameOfNewGroup[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NewGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NewGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuditLogCode as json.
func (o OptAuditLogCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuditLogCode from json.
func (o *OptAuditLogCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuditLogCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuditLogCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuditLogCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateDatabaseInputSeed as json.
func (o OptCreateDatabaseInputSeed) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateDatabaseInputSeed from json.
func (o *OptCreateDatabaseInputSeed) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateDatabaseInputSeed to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateDatabaseInputSeed) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateDatabaseInputSeed) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateDatabaseInputSeedType as json.
func (o OptCreateDatabaseInputSeedType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreateDatabaseInputSeedType from json.
func (o *OptCreateDatabaseInputSeedType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateDatabaseInputSeedType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateDatabaseInputSeedType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateDatabaseInputSeedType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateDatabaseOutput as json.
func (o OptCreateDatabaseOutput) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateDatabaseOutput from json.
func (o *OptCreateDatabaseOutput) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateDatabaseOutput to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateDatabaseOutput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateDatabaseOutput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTokenInput as json.
func (o OptCreateTokenInput) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateTokenInput from json.
func (o *OptCreateTokenInput) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateTokenInput to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateTokenInput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateTokenInput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTokenInputPermissions as json.
func (o OptCreateTokenInputPermissions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateTokenInputPermissions from json.
func (o *OptCreateTokenInputPermissions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateTokenInputPermissions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateTokenInputPermissions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateTokenInputPermissions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTokenInputPermissionsReadAttach as json.
func (o OptCreateTokenInputPermissionsReadAttach) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateTokenInputPermissionsReadAttach from json.
func (o *OptCreateTokenInputPermissionsReadAttach) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateTokenInputPermissionsReadAttach to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateTokenInputPermissionsReadAttach) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateTokenInputPermissionsReadAttach) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Database as json.
func (o OptDatabase) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Database from json.
func (o *OptDatabase) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatabase to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatabase) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatabase) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatabaseUsageObject as json.
func (o OptDatabaseUsageObject) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DatabaseUsageObject from json.
func (o *OptDatabaseUsageObject) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatabaseUsageObject to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatabaseUsageObject) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatabaseUsageObject) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatabaseUsageOutput as json.
func (o OptDatabaseUsageOutput) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DatabaseUsageOutput from json.
func (o *OptDatabaseUsageOutput) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatabaseUsageOutput to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatabaseUsageOutput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatabaseUsageOutput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DbId as json.
func (o OptDbId) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DbId from json.
func (o *OptDbId) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDbId to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDbId) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDbId) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Extensions as json.
func (o OptExtensions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Extensions from json.
func (o *OptExtensions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExtensions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExtensions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExtensions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Group as json.
func (o OptGroup) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Group from json.
func (o *OptGroup) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroup to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Hostname as json.
func (o OptHostname) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Hostname from json.
func (o *OptHostname) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHostname to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHostname) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHostname) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Instance as json.
func (o OptInstance) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Instance from json.
func (o *OptInstance) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInstance to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInstance) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInstance) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InstanceType as json.
func (o OptInstanceType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes InstanceType from json.
func (o *OptInstanceType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInstanceType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInstanceType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInstanceType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Invite as json.
func (o OptInvite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Invite from json.
func (o *OptInvite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInvite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInvite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInvite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InviteRole as json.
func (o OptInviteRole) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes InviteRole from json.
func (o *OptInviteRole) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInviteRole to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInviteRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInviteRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MemberRole as json.
func (o OptMemberRole) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes MemberRole from json.
func (o *OptMemberRole) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMemberRole to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMemberRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMemberRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Name as json.
func (o OptName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Name from json.
func (o *OptName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Organization as json.
func (o OptOrganization) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Organization from json.
func (o *OptOrganization) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOrganization to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOrganization) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOrganization) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OrganizationType as json.
func (o OptOrganizationType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes OrganizationType from json.
func (o *OptOrganizationType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOrganizationType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOrganizationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOrganizationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Role as json.
func (o OptRole) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Role from json.
func (o *OptRole) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRole to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes url.URL as json.
func (o OptURI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptURI to nil")
	}
	o.Set = true
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Username as json.
func (o OptUsername) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Username from json.
func (o *OptUsername) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUsername to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUsername) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUsername) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes V1LocationsGetOKLocations as json.
func (o OptV1LocationsGetOKLocations) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes V1LocationsGetOKLocations from json.
func (o *OptV1LocationsGetOKLocations) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptV1LocationsGetOKLocations to nil")
	}
	o.Set = true
	o.Value = make(V1LocationsGetOKLocations)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptV1LocationsGetOKLocations) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptV1LocationsGetOKLocations) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes V1OrganizationsOrganizationNameAuditLogsGetOKPagination as json.
func (o OptV1OrganizationsOrganizationNameAuditLogsGetOKPagination) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes V1OrganizationsOrganizationNameAuditLogsGetOKPagination from json.
func (o *OptV1OrganizationsOrganizationNameAuditLogsGetOKPagination) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptV1OrganizationsOrganizationNameAuditLogsGetOKPagination to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptV1OrganizationsOrganizationNameAuditLogsGetOKPagination) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptV1OrganizationsOrganizationNameAuditLogsGetOKPagination) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes V1OrganizationsOrganizationNameInvitesPostReqRole as json.
func (o OptV1OrganizationsOrganizationNameInvitesPostReqRole) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes V1OrganizationsOrganizationNameInvitesPostReqRole from json.
func (o *OptV1OrganizationsOrganizationNameInvitesPostReqRole) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptV1OrganizationsOrganizationNameInvitesPostReqRole to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptV1OrganizationsOrganizationNameInvitesPostReqRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptV1OrganizationsOrganizationNameInvitesPostReqRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes V1OrganizationsOrganizationNameMembersPostReqRole as json.
func (o OptV1OrganizationsOrganizationNameMembersPostReqRole) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes V1OrganizationsOrganizationNameMembersPostReqRole from json.
func (o *OptV1OrganizationsOrganizationNameMembersPostReqRole) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptV1OrganizationsOrganizationNameMembersPostReqRole to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptV1OrganizationsOrganizationNameMembersPostReqRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptV1OrganizationsOrganizationNameMembersPostReqRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Organization) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Organization) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Slug.Set {
			e.FieldStart("slug")
			s.Slug.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Overages.Set {
			e.FieldStart("overages")
			s.Overages.Encode(e)
		}
	}
	{
		if s.BlockedReads.Set {
			e.FieldStart("blocked_reads")
			s.BlockedReads.Encode(e)
		}
	}
	{
		if s.BlockedWrites.Set {
			e.FieldStart("blocked_writes")
			s.BlockedWrites.Encode(e)
		}
	}
}

var jsonFieldsNameOfOrganization = [6]string{
	0: "name",
	1: "slug",
	2: "type",
	3: "overages",
	4: "blocked_reads",
	5: "blocked_writes",
}

// Decode decodes Organization from json.
func (s *Organization) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Organization to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "slug":
			if err := func() error {
				s.Slug.Reset()
				if err := s.Slug.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slug\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "overages":
			if err := func() error {
				s.Overages.Reset()
				if err := s.Overages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overages\"")
			}
		case "blocked_reads":
			if err := func() error {
				s.BlockedReads.Reset()
				if err := s.BlockedReads.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_reads\"")
			}
		case "blocked_writes":
			if err := func() error {
				s.BlockedWrites.Reset()
				if err := s.BlockedWrites.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_writes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Organization")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Organization) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Organization) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OrganizationType as json.
func (s OrganizationType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes OrganizationType from json.
func (s *OrganizationType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OrganizationType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch OrganizationType(v) {
	case OrganizationTypePersonal:
		*s = OrganizationTypePersonal
	case OrganizationTypeTeam:
		*s = OrganizationTypeTeam
	default:
		*s = OrganizationType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OrganizationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OrganizationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Role as json.
func (s Role) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Role from json.
func (s *Role) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Role to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Role(v) {
	case RoleOwner:
		*s = RoleOwner
	case RoleAdmin:
		*s = RoleAdmin
	case RoleMember:
		*s = RoleMember
	default:
		*s = Role(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Role) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Role) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Username as json.
func (s Username) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Username from json.
func (s *Username) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Username to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Username(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Username) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Username) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1AuthAPITokensGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1AuthAPITokensGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Tokens != nil {
			e.FieldStart("tokens")
			e.ArrStart()
			for _, elem := range s.Tokens {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfV1AuthAPITokensGetOK = [1]string{
	0: "tokens",
}

// Decode decodes V1AuthAPITokensGetOK from json.
func (s *V1AuthAPITokensGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1AuthAPITokensGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "tokens":
			if err := func() error {
				s.Tokens = make([]APIToken, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem APIToken
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Tokens = append(s.Tokens, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tokens\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1AuthAPITokensGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1AuthAPITokensGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1AuthAPITokensGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1AuthValidateGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1AuthValidateGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Exp.Set {
			e.FieldStart("exp")
			s.Exp.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1AuthValidateGetOK = [1]string{
	0: "exp",
}

// Decode decodes V1AuthValidateGetOK from json.
func (s *V1AuthValidateGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1AuthValidateGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exp":
			if err := func() error {
				s.Exp.Reset()
				if err := s.Exp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1AuthValidateGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1AuthValidateGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1AuthValidateGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1LocationsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1LocationsGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Locations.Set {
			e.FieldStart("locations")
			s.Locations.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1LocationsGetOK = [1]string{
	0: "locations",
}

// Decode decodes V1LocationsGetOK from json.
func (s *V1LocationsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1LocationsGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "locations":
			if err := func() error {
				s.Locations.Reset()
				if err := s.Locations.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1LocationsGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1LocationsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1LocationsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s V1LocationsGetOKLocations) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s V1LocationsGetOKLocations) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Str(elem)
	}
}

// Decode decodes V1LocationsGetOKLocations from json.
func (s *V1LocationsGetOKLocations) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1LocationsGetOKLocations to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem string
		if err := func() error {
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1LocationsGetOKLocations")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s V1LocationsGetOKLocations) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1LocationsGetOKLocations) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.AuditLogs != nil {
			e.FieldStart("audit_logs")
			e.ArrStart()
			for _, elem := range s.AuditLogs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Pagination.Set {
			e.FieldStart("pagination")
			s.Pagination.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameAuditLogsGetOK = [2]string{
	0: "audit_logs",
	1: "pagination",
}

// Decode decodes V1OrganizationsOrganizationNameAuditLogsGetOK from json.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameAuditLogsGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audit_logs":
			if err := func() error {
				s.AuditLogs = make([]AuditLog, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AuditLog
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuditLogs = append(s.AuditLogs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audit_logs\"")
			}
		case "pagination":
			if err := func() error {
				s.Pagination.Reset()
				if err := s.Pagination.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pagination\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameAuditLogsGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOKPagination) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOKPagination) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalRows.Set {
			e.FieldStart("total_rows")
			s.TotalRows.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameAuditLogsGetOKPagination = [4]string{
	0: "page",
	1: "page_size",
	2: "total_pages",
	3: "total_rows",
}

// Decode decodes V1OrganizationsOrganizationNameAuditLogsGetOKPagination from json.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOKPagination) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameAuditLogsGetOKPagination to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_rows":
			if err := func() error {
				s.TotalRows.Reset()
				if err := s.TotalRows.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_rows\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameAuditLogsGetOKPagination")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOKPagination) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameAuditLogsGetOKPagination) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Jwt.Set {
			e.FieldStart("jwt")
			s.Jwt.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK = [1]string{
	0: "jwt",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "jwt":
			if err := func() error {
				s.Jwt.Reset()
				if err := s.Jwt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jwt\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Database.Set {
			e.FieldStart("database")
			s.Database.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK = [1]string{
	0: "database",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "database":
			if err := func() error {
				s.Database.Reset()
				if err := s.Database.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"database\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Database.Set {
			e.FieldStart("database")
			s.Database.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK = [1]string{
	0: "database",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "database":
			if err := func() error {
				s.Database.Reset()
				if err := s.Database.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"database\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Instances != nil {
			e.FieldStart("instances")
			e.ArrStart()
			for _, elem := range s.Instances {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK = [1]string{
	0: "instances",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "instances":
			if err := func() error {
				s.Instances = make([]Instance, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Instance
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Instances = append(s.Instances, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"instances\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Instance.Set {
			e.FieldStart("instance")
			s.Instance.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK = [1]string{
	0: "instance",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "instance":
			if err := func() error {
				s.Instance.Reset()
				if err := s.Instance.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"instance\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.TopQueries != nil {
			e.FieldStart("top_queries")
			e.ArrStart()
			for _, elem := range s.TopQueries {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK = [1]string{
	0: "top_queries",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "top_queries":
			if err := func() error {
				s.TopQueries = make([]DatabaseStatsOutput, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DatabaseStatsOutput
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TopQueries = append(s.TopQueries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"top_queries\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Database.Set {
			e.FieldStart("database")
			s.Database.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK = [1]string{
	0: "database",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "database":
			if err := func() error {
				s.Database.Reset()
				if err := s.Database.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"database\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDumpsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesDumpsPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.DumpURL.Set {
			e.FieldStart("dump_url")
			s.DumpURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesDumpsPostOK = [1]string{
	0: "dump_url",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesDumpsPostOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesDumpsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesDumpsPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "dump_url":
			if err := func() error {
				s.DumpURL.Reset()
				if err := s.DumpURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dump_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesDumpsPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDumpsPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesDumpsPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Databases != nil {
			e.FieldStart("databases")
			e.ArrStart()
			for _, elem := range s.Databases {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesGetOK = [1]string{
	0: "databases",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesGetOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "databases":
			if err := func() error {
				s.Databases = make([]Database, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Database
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Databases = append(s.Databases, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"databases\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesPostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesPostBadRequest = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesPostBadRequest from json.
func (s *V1OrganizationsOrganizationNameDatabasesPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesPostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesPostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostConflict) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesPostConflict) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesPostConflict = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesPostConflict from json.
func (s *V1OrganizationsOrganizationNameDatabasesPostConflict) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesPostConflict to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesPostConflict")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostConflict) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostConflict) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameDatabasesPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Database.Set {
			e.FieldStart("database")
			s.Database.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameDatabasesPostOK = [1]string{
	0: "database",
}

// Decode decodes V1OrganizationsOrganizationNameDatabasesPostOK from json.
func (s *V1OrganizationsOrganizationNameDatabasesPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameDatabasesPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "database":
			if err := func() error {
				s.Database.Reset()
				if err := s.Database.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"database\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameDatabasesPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameDatabasesPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Groups != nil {
			e.FieldStart("groups")
			e.ArrStart()
			for _, elem := range s.Groups {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGetOK = [1]string{
	0: "groups",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGetOK from json.
func (s *V1OrganizationsOrganizationNameGroupsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "groups":
			if err := func() error {
				s.Groups = make([]Group, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Group
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Groups = append(s.Groups, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"groups\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Jwt.Set {
			e.FieldStart("jwt")
			s.Jwt.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK = [1]string{
	0: "jwt",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "jwt":
			if err := func() error {
				s.Jwt.Reset()
				if err := s.Jwt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jwt\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Group.Set {
			e.FieldStart("group")
			s.Group.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameDeleteOK = [1]string{
	0: "group",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameDeleteOK from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Group.Set {
			e.FieldStart("group")
			s.Group.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameGetOK = [1]string{
	0: "group",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameGetOK from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Group.Set {
			e.FieldStart("group")
			s.Group.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK = [1]string{
	0: "group",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Group.Set {
			e.FieldStart("group")
			s.Group.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK = [1]string{
	0: "group",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.Organization.Set {
			e.FieldStart("organization")
			s.Organization.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq = [1]string{
	0: "organization",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq from json.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "organization":
			if err := func() error {
				s.Organization.Reset()
				if err := s.Organization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"organization\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsGroupNameTransferPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsPostConflict) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsPostConflict) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsPostConflict = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsPostConflict from json.
func (s *V1OrganizationsOrganizationNameGroupsPostConflict) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsPostConflict to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsPostConflict")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsPostConflict) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsPostConflict) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameGroupsPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Group.Set {
			e.FieldStart("group")
			s.Group.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameGroupsPostOK = [1]string{
	0: "group",
}

// Decode decodes V1OrganizationsOrganizationNameGroupsPostOK from json.
func (s *V1OrganizationsOrganizationNameGroupsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameGroupsPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameGroupsPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameGroupsPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameGroupsPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameInvitesGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameInvitesGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Invites != nil {
			e.FieldStart("invites")
			e.ArrStart()
			for _, elem := range s.Invites {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameInvitesGetOK = [1]string{
	0: "invites",
}

// Decode decodes V1OrganizationsOrganizationNameInvitesGetOK from json.
func (s *V1OrganizationsOrganizationNameInvitesGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameInvitesGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "invites":
			if err := func() error {
				s.Invites = make([]Invite, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Invite
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Invites = append(s.Invites, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invites\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameInvitesGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameInvitesGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameInvitesGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameInvitesPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameInvitesPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Invited.Set {
			e.FieldStart("invited")
			s.Invited.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameInvitesPostOK = [1]string{
	0: "invited",
}

// Decode decodes V1OrganizationsOrganizationNameInvitesPostOK from json.
func (s *V1OrganizationsOrganizationNameInvitesPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameInvitesPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "invited":
			if err := func() error {
				s.Invited.Reset()
				if err := s.Invited.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invited\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameInvitesPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameInvitesPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameInvitesPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameInvitesPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameInvitesPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("email")
		e.Str(s.Email)
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameInvitesPostReq = [2]string{
	0: "email",
	1: "role",
}

// Decode decodes V1OrganizationsOrganizationNameInvitesPostReq from json.
func (s *V1OrganizationsOrganizationNameInvitesPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameInvitesPostReq to nil")
	}
	var requiredBitSet [1]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameInvitesPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfV1OrganizationsOrganizationNameInvitesPostReq) {
					name = jsonFieldsNameOfV1OrganizationsOrganizationNameInvitesPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameInvitesPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameInvitesPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes V1OrganizationsOrganizationNameInvitesPostReqRole as json.
func (s V1OrganizationsOrganizationNameInvitesPostReqRole) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes V1OrganizationsOrganizationNameInvitesPostReqRole from json.
func (s *V1OrganizationsOrganizationNameInvitesPostReqRole) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameInvitesPostReqRole to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch V1OrganizationsOrganizationNameInvitesPostReqRole(v) {
	case V1OrganizationsOrganizationNameInvitesPostReqRoleAdmin:
		*s = V1OrganizationsOrganizationNameInvitesPostReqRoleAdmin
	case V1OrganizationsOrganizationNameInvitesPostReqRoleMember:
		*s = V1OrganizationsOrganizationNameInvitesPostReqRoleMember
	default:
		*s = V1OrganizationsOrganizationNameInvitesPostReqRole(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s V1OrganizationsOrganizationNameInvitesPostReqRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameInvitesPostReqRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameMembersGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Members != nil {
			e.FieldStart("members")
			e.ArrStart()
			for _, elem := range s.Members {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameMembersGetOK = [1]string{
	0: "members",
}

// Decode decodes V1OrganizationsOrganizationNameMembersGetOK from json.
func (s *V1OrganizationsOrganizationNameMembersGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameMembersGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "members":
			if err := func() error {
				s.Members = make([]Member, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Member
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Members = append(s.Members, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameMembersGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameMembersGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersPostConflict) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameMembersPostConflict) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameMembersPostConflict = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameMembersPostConflict from json.
func (s *V1OrganizationsOrganizationNameMembersPostConflict) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameMembersPostConflict to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameMembersPostConflict")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersPostConflict) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameMembersPostConflict) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersPostNotFound) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameMembersPostNotFound) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameMembersPostNotFound = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameMembersPostNotFound from json.
func (s *V1OrganizationsOrganizationNameMembersPostNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameMembersPostNotFound to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameMembersPostNotFound")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersPostNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameMembersPostNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameMembersPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Member.Set {
			e.FieldStart("member")
			s.Member.Encode(e)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameMembersPostOK = [2]string{
	0: "member",
	1: "role",
}

// Decode decodes V1OrganizationsOrganizationNameMembersPostOK from json.
func (s *V1OrganizationsOrganizationNameMembersPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameMembersPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "member":
			if err := func() error {
				s.Member.Reset()
				if err := s.Member.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameMembersPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameMembersPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameMembersPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameMembersPostReq = [2]string{
	0: "username",
	1: "role",
}

// Decode decodes V1OrganizationsOrganizationNameMembersPostReq from json.
func (s *V1OrganizationsOrganizationNameMembersPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameMembersPostReq to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameMembersPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameMembersPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes V1OrganizationsOrganizationNameMembersPostReqRole as json.
func (s V1OrganizationsOrganizationNameMembersPostReqRole) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes V1OrganizationsOrganizationNameMembersPostReqRole from json.
func (s *V1OrganizationsOrganizationNameMembersPostReqRole) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameMembersPostReqRole to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch V1OrganizationsOrganizationNameMembersPostReqRole(v) {
	case V1OrganizationsOrganizationNameMembersPostReqRoleAdmin:
		*s = V1OrganizationsOrganizationNameMembersPostReqRoleAdmin
	case V1OrganizationsOrganizationNameMembersPostReqRoleMember:
		*s = V1OrganizationsOrganizationNameMembersPostReqRoleMember
	default:
		*s = V1OrganizationsOrganizationNameMembersPostReqRole(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s V1OrganizationsOrganizationNameMembersPostReqRole) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameMembersPostReqRole) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteNotFound) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteNotFound) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameMembersUsernameDeleteNotFound = [1]string{
	0: "error",
}

// Decode decodes V1OrganizationsOrganizationNameMembersUsernameDeleteNotFound from json.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameMembersUsernameDeleteNotFound to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameMembersUsernameDeleteNotFound")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Member.Set {
			e.FieldStart("member")
			s.Member.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNameMembersUsernameDeleteOK = [1]string{
	0: "member",
}

// Decode decodes V1OrganizationsOrganizationNameMembersUsernameDeleteOK from json.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNameMembersUsernameDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "member":
			if err := func() error {
				s.Member.Reset()
				if err := s.Member.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNameMembersUsernameDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNameMembersUsernameDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNamePatchOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNamePatchOK) encodeFields(e *jx.Encoder) {
	{
		if s.Organization.Set {
			e.FieldStart("organization")
			s.Organization.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNamePatchOK = [1]string{
	0: "organization",
}

// Decode decodes V1OrganizationsOrganizationNamePatchOK from json.
func (s *V1OrganizationsOrganizationNamePatchOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNamePatchOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "organization":
			if err := func() error {
				s.Organization.Reset()
				if err := s.Organization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"organization\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNamePatchOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNamePatchOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNamePatchOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *V1OrganizationsOrganizationNamePatchReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *V1OrganizationsOrganizationNamePatchReq) encodeFields(e *jx.Encoder) {
	{
		if s.Overages.Set {
			e.FieldStart("overages")
			s.Overages.Encode(e)
		}
	}
}

var jsonFieldsNameOfV1OrganizationsOrganizationNamePatchReq = [1]string{
	0: "overages",
}

// Decode decodes V1OrganizationsOrganizationNamePatchReq from json.
func (s *V1OrganizationsOrganizationNamePatchReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode V1OrganizationsOrganizationNamePatchReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "overages":
			if err := func() error {
				s.Overages.Reset()
				if err := s.Overages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overages\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode V1OrganizationsOrganizationNamePatchReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *V1OrganizationsOrganizationNamePatchReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *V1OrganizationsOrganizationNamePatchReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
