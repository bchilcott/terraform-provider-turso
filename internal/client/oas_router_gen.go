// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			origElem := elem
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "api-tokens"
					origElem := elem
					if l := len("api-tokens"); len(elem) >= l && elem[0:l] == "api-tokens" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleV1AuthAPITokensGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "tokenName"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleV1AuthAPITokensTokenNameDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleV1AuthAPITokensTokenNamePostRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'v': // Prefix: "validate"
					origElem := elem
					if l := len("validate"); len(elem) >= l && elem[0:l] == "validate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleV1AuthValidateGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "locations"
				origElem := elem
				if l := len("locations"); len(elem) >= l && elem[0:l] == "locations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleV1LocationsGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'o': // Prefix: "organizations"
				origElem := elem
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleV1OrganizationsGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "organizationName"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "PATCH":
							s.handleV1OrganizationsOrganizationNamePatchRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "audit-logs"
							origElem := elem
							if l := len("audit-logs"); len(elem) >= l && elem[0:l] == "audit-logs" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleV1OrganizationsOrganizationNameAuditLogsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'd': // Prefix: "databases"
							origElem := elem
							if l := len("databases"); len(elem) >= l && elem[0:l] == "databases" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleV1OrganizationsOrganizationNameDatabasesGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleV1OrganizationsOrganizationNameDatabasesPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "dumps"
									origElem := elem
									if l := len("dumps"); len(elem) >= l && elem[0:l] == "dumps" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleV1OrganizationsOrganizationNameDatabasesDumpsPostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								}
								// Param: "databaseName"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameDeleteRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameGetRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "auth/"
										origElem := elem
										if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'r': // Prefix: "rotate"
											origElem := elem
											if l := len("rotate"); len(elem) >= l && elem[0:l] == "rotate" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePostRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										case 't': // Prefix: "tokens"
											origElem := elem
											if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPostRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 'c': // Prefix: "configuration"
										origElem := elem
										if l := len("configuration"); len(elem) >= l && elem[0:l] == "configuration" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "PATCH":
												s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatchRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "PATCH")
											}

											return
										}

										elem = origElem
									case 'i': // Prefix: "instances"
										origElem := elem
										if l := len("instances"); len(elem) >= l && elem[0:l] == "instances" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGetRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "instanceName"
											// Leaf parameter
											args[2] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGetRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 's': // Prefix: "stats"
										origElem := elem
										if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGetRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									case 'u': // Prefix: "usage"
										origElem := elem
										if l := len("usage"); len(elem) >= l && elem[0:l] == "usage" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleV1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGetRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'g': // Prefix: "groups"
							origElem := elem
							if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleV1OrganizationsOrganizationNameGroupsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleV1OrganizationsOrganizationNameGroupsPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "groupName"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleV1OrganizationsOrganizationNameGroupsGroupNameDeleteRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleV1OrganizationsOrganizationNameGroupsGroupNameGetRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "auth/"
										origElem := elem
										if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'r': // Prefix: "rotate"
											origElem := elem
											if l := len("rotate"); len(elem) >= l && elem[0:l] == "rotate" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleV1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePostRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										case 't': // Prefix: "tokens"
											origElem := elem
											if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleV1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPostRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 'l': // Prefix: "locations/"
										origElem := elem
										if l := len("locations/"); len(elem) >= l && elem[0:l] == "locations/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "location"
										// Leaf parameter
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDeleteRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											case "POST":
												s.handleV1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPostRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,POST")
											}

											return
										}

										elem = origElem
									case 't': // Prefix: "transfer"
										origElem := elem
										if l := len("transfer"); len(elem) >= l && elem[0:l] == "transfer" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleV1OrganizationsOrganizationNameGroupsGroupNameTransferPostRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									case 'u': // Prefix: "update"
										origElem := elem
										if l := len("update"); len(elem) >= l && elem[0:l] == "update" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleV1OrganizationsOrganizationNameGroupsGroupNameUpdatePostRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'i': // Prefix: "invites"
							origElem := elem
							if l := len("invites"); len(elem) >= l && elem[0:l] == "invites" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleV1OrganizationsOrganizationNameInvitesGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleV1OrganizationsOrganizationNameInvitesPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}

							elem = origElem
						case 'm': // Prefix: "members"
							origElem := elem
							if l := len("members"); len(elem) >= l && elem[0:l] == "members" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleV1OrganizationsOrganizationNameMembersGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleV1OrganizationsOrganizationNameMembersPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "username"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleV1OrganizationsOrganizationNameMembersUsernameDeleteRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			origElem := elem
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "api-tokens"
					origElem := elem
					if l := len("api-tokens"); len(elem) >= l && elem[0:l] == "api-tokens" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "V1AuthAPITokensGet"
							r.summary = "List API Tokens"
							r.operationID = ""
							r.pathPattern = "/v1/auth/api-tokens"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "tokenName"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								// Leaf: V1AuthAPITokensTokenNameDelete
								r.name = "V1AuthAPITokensTokenNameDelete"
								r.summary = "Revoke API Token"
								r.operationID = ""
								r.pathPattern = "/v1/auth/api-tokens/{tokenName}"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								// Leaf: V1AuthAPITokensTokenNamePost
								r.name = "V1AuthAPITokensTokenNamePost"
								r.summary = "Create API Token"
								r.operationID = ""
								r.pathPattern = "/v1/auth/api-tokens/{tokenName}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'v': // Prefix: "validate"
					origElem := elem
					if l := len("validate"); len(elem) >= l && elem[0:l] == "validate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: V1AuthValidateGet
							r.name = "V1AuthValidateGet"
							r.summary = "Validate API Token"
							r.operationID = ""
							r.pathPattern = "/v1/auth/validate"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "locations"
				origElem := elem
				if l := len("locations"); len(elem) >= l && elem[0:l] == "locations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: V1LocationsGet
						r.name = "V1LocationsGet"
						r.summary = "List Locations"
						r.operationID = ""
						r.pathPattern = "/v1/locations"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'o': // Prefix: "organizations"
				origElem := elem
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "V1OrganizationsGet"
						r.summary = "List Organizations"
						r.operationID = ""
						r.pathPattern = "/v1/organizations"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "organizationName"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "PATCH":
							r.name = "V1OrganizationsOrganizationNamePatch"
							r.summary = "Update Organization"
							r.operationID = ""
							r.pathPattern = "/v1/organizations/{organizationName}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "audit-logs"
							origElem := elem
							if l := len("audit-logs"); len(elem) >= l && elem[0:l] == "audit-logs" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: V1OrganizationsOrganizationNameAuditLogsGet
									r.name = "V1OrganizationsOrganizationNameAuditLogsGet"
									r.summary = "List Audit Logs"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/audit-logs"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'd': // Prefix: "databases"
							origElem := elem
							if l := len("databases"); len(elem) >= l && elem[0:l] == "databases" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "V1OrganizationsOrganizationNameDatabasesGet"
									r.summary = "List Databases"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/databases"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = "V1OrganizationsOrganizationNameDatabasesPost"
									r.summary = "Create Database"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/databases"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "dumps"
									origElem := elem
									if l := len("dumps"); len(elem) >= l && elem[0:l] == "dumps" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: V1OrganizationsOrganizationNameDatabasesDumpsPost
											r.name = "V1OrganizationsOrganizationNameDatabasesDumpsPost"
											r.summary = "Upload Dump"
											r.operationID = ""
											r.pathPattern = "/v1/organizations/{organizationName}/databases/dumps"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}
								// Param: "databaseName"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameDelete"
										r.summary = "Delete Database"
										r.operationID = ""
										r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}"
										r.args = args
										r.count = 2
										return r, true
									case "GET":
										r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameGet"
										r.summary = "Retrieve Database"
										r.operationID = ""
										r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "auth/"
										origElem := elem
										if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'r': // Prefix: "rotate"
											origElem := elem
											if l := len("rotate"); len(elem) >= l && elem[0:l] == "rotate" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePost
													r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthRotatePost"
													r.summary = "Invalidate All Database Auth Tokens"
													r.operationID = ""
													r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}/auth/rotate"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}

											elem = origElem
										case 't': // Prefix: "tokens"
											origElem := elem
											if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPost
													r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameAuthTokensPost"
													r.summary = "Generate Database Auth Token"
													r.operationID = ""
													r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}/auth/tokens"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 'c': // Prefix: "configuration"
										origElem := elem
										if l := len("configuration"); len(elem) >= l && elem[0:l] == "configuration" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "PATCH":
												// Leaf: V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatch
												r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameConfigurationPatch"
												r.summary = "Update Database Configuration"
												r.operationID = ""
												r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}/configuration"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'i': // Prefix: "instances"
										origElem := elem
										if l := len("instances"); len(elem) >= l && elem[0:l] == "instances" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesGet"
												r.summary = "List Database Instances"
												r.operationID = ""
												r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}/instances"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "instanceName"
											// Leaf parameter
											args[2] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGet
													r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameInstancesInstanceNameGet"
													r.summary = "Retrieve Database Instance"
													r.operationID = ""
													r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}/instances/{instanceName}"
													r.args = args
													r.count = 3
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 's': // Prefix: "stats"
										origElem := elem
										if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGet
												r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameStatsGet"
												r.summary = "Retrieve Database Stats"
												r.operationID = ""
												r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}/stats"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'u': // Prefix: "usage"
										origElem := elem
										if l := len("usage"); len(elem) >= l && elem[0:l] == "usage" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGet
												r.name = "V1OrganizationsOrganizationNameDatabasesDatabaseNameUsageGet"
												r.summary = "Retrieve Database Usage"
												r.operationID = ""
												r.pathPattern = "/v1/organizations/{organizationName}/databases/{databaseName}/usage"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'g': // Prefix: "groups"
							origElem := elem
							if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "V1OrganizationsOrganizationNameGroupsGet"
									r.summary = "List Groups"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/groups"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = "V1OrganizationsOrganizationNameGroupsPost"
									r.summary = "Create Group"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/groups"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "groupName"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = "V1OrganizationsOrganizationNameGroupsGroupNameDelete"
										r.summary = "Delete Group"
										r.operationID = ""
										r.pathPattern = "/v1/organizations/{organizationName}/groups/{groupName}"
										r.args = args
										r.count = 2
										return r, true
									case "GET":
										r.name = "V1OrganizationsOrganizationNameGroupsGroupNameGet"
										r.summary = "Retrieve Group"
										r.operationID = ""
										r.pathPattern = "/v1/organizations/{organizationName}/groups/{groupName}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "auth/"
										origElem := elem
										if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'r': // Prefix: "rotate"
											origElem := elem
											if l := len("rotate"); len(elem) >= l && elem[0:l] == "rotate" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePost
													r.name = "V1OrganizationsOrganizationNameGroupsGroupNameAuthRotatePost"
													r.summary = "Invalidate All Group Auth Tokens"
													r.operationID = ""
													r.pathPattern = "/v1/organizations/{organizationName}/groups/{groupName}/auth/rotate"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}

											elem = origElem
										case 't': // Prefix: "tokens"
											origElem := elem
											if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPost
													r.name = "V1OrganizationsOrganizationNameGroupsGroupNameAuthTokensPost"
													r.summary = "Create Group Auth Token"
													r.operationID = ""
													r.pathPattern = "/v1/organizations/{organizationName}/groups/{groupName}/auth/tokens"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 'l': // Prefix: "locations/"
										origElem := elem
										if l := len("locations/"); len(elem) >= l && elem[0:l] == "locations/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "location"
										// Leaf parameter
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "DELETE":
												// Leaf: V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDelete
												r.name = "V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationDelete"
												r.summary = "Remove Location from Group"
												r.operationID = ""
												r.pathPattern = "/v1/organizations/{organizationName}/groups/{groupName}/locations/{location}"
												r.args = args
												r.count = 3
												return r, true
											case "POST":
												// Leaf: V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPost
												r.name = "V1OrganizationsOrganizationNameGroupsGroupNameLocationsLocationPost"
												r.summary = "Add Location to Group"
												r.operationID = ""
												r.pathPattern = "/v1/organizations/{organizationName}/groups/{groupName}/locations/{location}"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 't': // Prefix: "transfer"
										origElem := elem
										if l := len("transfer"); len(elem) >= l && elem[0:l] == "transfer" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: V1OrganizationsOrganizationNameGroupsGroupNameTransferPost
												r.name = "V1OrganizationsOrganizationNameGroupsGroupNameTransferPost"
												r.summary = "Transfer Group"
												r.operationID = ""
												r.pathPattern = "/v1/organizations/{organizationName}/groups/{groupName}/transfer"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'u': // Prefix: "update"
										origElem := elem
										if l := len("update"); len(elem) >= l && elem[0:l] == "update" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: V1OrganizationsOrganizationNameGroupsGroupNameUpdatePost
												r.name = "V1OrganizationsOrganizationNameGroupsGroupNameUpdatePost"
												r.summary = "Update Databases in a Group"
												r.operationID = ""
												r.pathPattern = "/v1/organizations/{organizationName}/groups/{groupName}/update"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'i': // Prefix: "invites"
							origElem := elem
							if l := len("invites"); len(elem) >= l && elem[0:l] == "invites" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: V1OrganizationsOrganizationNameInvitesGet
									r.name = "V1OrganizationsOrganizationNameInvitesGet"
									r.summary = "List Invites"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/invites"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									// Leaf: V1OrganizationsOrganizationNameInvitesPost
									r.name = "V1OrganizationsOrganizationNameInvitesPost"
									r.summary = "Invite User"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/invites"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'm': // Prefix: "members"
							origElem := elem
							if l := len("members"); len(elem) >= l && elem[0:l] == "members" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "V1OrganizationsOrganizationNameMembersGet"
									r.summary = "List Members"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/members"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = "V1OrganizationsOrganizationNameMembersPost"
									r.summary = "Add Member"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationName}/members"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "username"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										// Leaf: V1OrganizationsOrganizationNameMembersUsernameDelete
										r.name = "V1OrganizationsOrganizationNameMembersUsernameDelete"
										r.summary = "Remove Member"
										r.operationID = ""
										r.pathPattern = "/v1/organizations/{organizationName}/members/{username}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
